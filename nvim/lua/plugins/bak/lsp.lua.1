return {
	"neovim/nvim-lspconfig",
	event = { "BufReadPre", "BufNewFile" },
	dependencies = {
		"williamboman/mason.nvim",
		"williamboman/mason-lspconfig.nvim",
		{ "j-hui/fidget.nvim", opts = {} },
	},
	opts = {
		servers = {
			pylsp = {
				settings = {
					pylsp = {
						plugins = {
							pyflakes = { enabled = false },
							mccabe = { enabled = false },
						},
					},
				},
			},
		},
	},
	config = function(_, opts)
		local lspconfig = require("lspconfig")
		for server, config in pairs(opts.servers) do
			-- passing config.capabilities to blink.cmp merges with the capabilities in your
			-- `opts[server].capabilities, if you've defined it
			config.capabilities = require("blink.cmp").get_lsp_capabilities(config.capabilities)
			lspconfig[server].setup(config)
		end
		-- import lspconfig plugin

		-- import mason_lspconfig plugin
		local mason_lspconfig = require("mason-lspconfig")

		local capabilities = {
			textDocument = {
				foldingRange = {
					dynamicRegistration = false,
					lineFoldingOnly = true,
				},
			},
		}
		capabilities = require("blink.cmp").get_lsp_capabilities(capabilities)

		require("mason").setup()
		mason_lspconfig.setup({
			handlers = {
				-- default handler for installed servers
				function(server_name)
					lspconfig[server_name].setup({
						capabilities = capabilities,
					})
				end,

				-- hack for svelte-language-server watcher doesn't work in neovim lspconfig #2008
				-- https://github.com/Dakai/setup_new_linux_PC/blob/main/lua_nvim/after/plugin/lspconfig.rc.lua
				svelte = function()
					lspconfig.svelte.setup({
						filetypes = { "svelte" },
						on_attach = function(client, bufnr)
							if client.name == "svelte" then
								vim.api.nvim_create_autocmd("BufWritePost", {
									pattern = { "*.js", "*.ts", "*.svelte" },
									callback = function(ctx)
										client.notify("$/onDidChangeTsOrJsFile", { uri = ctx.file })
									end,
								})
							end
							if vim.bo[bufnr].filetype == "svelte" then
								vim.api.nvim_create_autocmd("BufWritePost", {
									pattern = { "*.js", "*.ts", "*.svelte" },
									callback = function(ctx)
										client.notify("$/onDidChangeTsOrJsFile", { uri = ctx.file })
									end,
								})
							end
						end,
					})
				end,

				["lua_ls"] = function()
					lspconfig.lua_ls.setup({
						cmd = { "lua-language-server", "--force-accept-workspace" },
						filetypes = { "lua" },
						capabilities = capabilities,
						-- cmd = { "lua_ls" },
						settings = {
							Lua = {
								diagnostics = {
									globals = { "vim" }, -- Recognize 'vim' as a global variable
								},
								workspace = {
									library = {
										vim.api.nvim_get_runtime_file("", true),
										"${3rd}/love2d/library",
									}, -- Include Neovim runtime files
								},
								telemetry = {
									enable = false,
								},
							},
						},
					})
				end,
			},
		})

		vim.diagnostic.config({
			-- update_in_insert = true,
			virtual_text = true,
			-- virtual_lines = true,
			-- float = {
			-- 	style = "minimal",
			-- 	-- source = "always",
			-- 	header = "",
			-- 	prefix = "",
			-- },
		})
	end,
}
